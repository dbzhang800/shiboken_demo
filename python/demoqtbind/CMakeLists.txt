# ================================ Project configuration ======================================

find_package(Qt5 COMPONENTS Core REQUIRED)

# The header file with all the types and functions for which bindings will be generated.
# Usually it simply includes other headers of the library you are creating bindings for.
set(wrapped_header ${CMAKE_CURRENT_SOURCE_DIR}/demoqtbind.h)

# The typesystem xml file which defines the relationships between the C++ types / functions
# and the corresponding Python equivalents.
set(typesystem_file ${CMAKE_CURRENT_SOURCE_DIR}/demoqtbind.xml)

# Specify which C++ files will be generated by shiboken. This includes the module wrapper
# and a '.cpp' file per C++ type. These are needed for generating the module shared
# library.
set(generated_sources
    ${CMAKE_CURRENT_BINARY_DIR}/demoqtbind/demoqtbind_module_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/demoqtbind/demoqtclass_wrapper.cpp
    )

# ====================== Shiboken target for generating binding C++ files  ====================

set(includespaths ${Qt5Core_INCLUDE_DIRS})
list(JOIN includespaths ";-I" extraincludepath)

# Set up the options to pass to shiboken.
set(shiboken_options --generator-set=shiboken --enable-parent-ctor-heuristic
    --enable-return-value-heuristic --use-isnull-as-nb_nonzero
    --avoid-protected-hack --enable-pyside-extensions
    -I${extraincludepath}
    -I${CMAKE_SOURCE_DIR}/cpp/demoqtlib
    -I${pyside2_module_path}/include/
    -I${pyside2_module_path}/include/QtCore/
    -T${pyside2_module_path}/typesystems/
    --output-directory=${CMAKE_CURRENT_BINARY_DIR}
    )

set(generated_sources_dependencies ${wrapped_header} ${typesystem_file})

# Add custom target to run shiboken to generate the binding cpp files.
add_custom_command(OUTPUT ${generated_sources}
                    COMMAND ${shiboken_path}
                    ${shiboken_options} ${wrapped_header} ${typesystem_file}
                    DEPENDS ${generated_sources_dependencies}
                    IMPLICIT_DEPENDS CXX ${wrapped_header}
                    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
                    COMMENT "Running generator for ${typesystem_file}.")


# =============================== CMake target - bindings_library =============================


# Set the cpp files which will be used for the bindings library.
set(demoqtbind_sources ${generated_sources})

# Define and build the bindings library.
add_library(demoqtbind MODULE ${demoqtbind_sources})

# Apply relevant include and link flags.
target_include_directories(demoqtbind PRIVATE ${python_include_dir})
target_include_directories(demoqtbind PRIVATE ${shiboken_include_dir})
target_include_directories(demoqtbind PRIVATE ${pyside2_module_path}/include/)
target_include_directories(demoqtbind PRIVATE ${pyside2_module_path}/include/QtCore/)
target_include_directories(demoqtbind PRIVATE ${CMAKE_SOURCE_DIR}/cpp/demoqtlib)

target_link_libraries(demoqtbind PRIVATE ${shiboken_shared_libraries})
target_link_libraries(demoqtbind PRIVATE ${pyside2_link})
target_link_libraries(demoqtbind PRIVATE Qt::Core)
target_link_libraries(demoqtbind PRIVATE demoqtlib)


# Adjust the name of generated module.
set_property(TARGET demoqtbind PROPERTY PREFIX "")
set_property(TARGET demoqtbind PROPERTY OUTPUT_NAME
             "demoqtbind${PYTHON_EXTENSION_SUFFIX}")
if(WIN32)
    set_property(TARGET demoqtbind PROPERTY SUFFIX ".pyd")
endif()

# Make sure the linker doesn't complain about not finding Python symbols on macOS.
if(APPLE)
  set_target_properties(demoqtbind PROPERTIES LINK_FLAGS "-undefined dynamic_lookup")
endif(APPLE)

# Find and link to the python import library only on Windows.
# On Linux and macOS, the undefined symbols will get resolved by the dynamic linker
# (the symbols will be picked up in the Python executable).
if (WIN32)
    list(GET python_linking_data 0 python_libdir)
    list(GET python_linking_data 1 python_lib)
    find_library(python_link_flags ${python_lib} PATHS ${python_libdir} HINTS ${python_libdir})
    target_link_libraries(demoqtbind PRIVATE ${python_link_flags})
endif()

# ================================= Dubious deployment section ================================

if(WIN32)
    set_target_properties(demoqtbind
                           PROPERTIES LINK_FLAGS "${python_additional_link_flags}")
endif()

# =============================================================================================
# !!! (The section below is deployment related, so in a real world application you will want to
# take care of this properly with some custom script or tool).
# =============================================================================================
# Install the library and the bindings module into the source folder near the main.py file, so
# that the Python interpeter successfully imports the used module.
set(dist_dir "${CMAKE_SOURCE_DIR}/examples")

install(TARGETS demoqtbind
        LIBRARY DESTINATION "${dist_dir}"
        RUNTIME DESTINATION "${dist_dir}"
        )
# =============================================================================================
# !!! End of dubious section.
# =============================================================================================
